#!/bin/bash

set -eu

# First check that the meta file is valid.
if [ -e META.json ]; then
    echo Validating META.json...
    pgxn validate-meta META.json
else
    echo 'ERROR:  No META.json file'
    echo 'DETAIL: See http://manager.pgxn.org/howto for how to create a PGXN'
    echo '        distribution, including the required META.json file.'
    exit 2
fi

# Get the extension name and version.
DISTNAME="${PGXN_DIST_NAME:-$(perl -MJSON=decode_json -E 'say decode_json(join "", <>)->{name}' META.json)}"
VERSION="${PGXN_DIST_VERSION:-$(perl -MJSON=decode_json -E 'say decode_json(join "", <>)->{version}' META.json)}"

# Now bundle up the distribution for release.
release="${DISTNAME}-${VERSION}"
cmd="${GIT_ARCHIVE_CMD:-archive}"
if [ "true" == "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
    echo "Bundling $release.zip with git ${cmd}..."
    if [ "${cmd}" = 'archive-all' ]; then
        # shellcheck disable=SC2086 # ${GIT_BUNDLE_OPTS:-} must be unquoted
        git archive-all -v --prefix "${release}/" --force-submodules ${GIT_BUNDLE_OPTS:-} "${release}.zip"
    else
        # shellcheck disable=SC2086 # ${GIT_BUNDLE_OPTS:-} must be unquoted
        git archive -v --format zip --prefix "${release}/" ${GIT_BUNDLE_OPTS:-} --output "${release}.zip" HEAD
    fi
else
    echo "Bundling $release.zip with zip utility..."
    mkdir "/tmp/$release"
    cp -rf . "/tmp/$release"
    set -x
    # shellcheck disable=SC2086 # ${ZIP_BUNDLE_OPTS:-} must be unquoted
    (cd /tmp && zip -r "$release.zip" "$release" ${ZIP_BUNDLE_OPTS:-})
    mv "/tmp/$release.zip" .
fi

[ -n "${GITHUB_OUTPUT:-}" ] && echo "bundle=$release.zip" >> "$GITHUB_OUTPUT"
